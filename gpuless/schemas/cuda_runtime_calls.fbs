table FBParamBuffer {
    buffer:[uint8];
}

enum FBPtxParameterType : byte {
    s8,
    s16,
    s32,
    s64,
    u8,
    u16,
    u32,
    u64,
    f16,
    f16x2,
    f32,
    f64,
    b8,
    b16,
    b32,
    b64,
    pred,
    invalid
}

table FBParamInfo {
    name:string;
    ptx_param_type:FBPtxParameterType;
    type_size:uint64;
    align:uint64;
    size:uint64;
}

struct FBDim3 {
    x:uint64;
    y:uint64;
    z:uint64;
}

table FBCudaMalloc {
    dev_ptr:uint64;
    size:uint64;
}

table FBCudaMemcpyH2D {
    dst:uint64;
    src:uint64;
    size:uint64;
    buffer:[uint8];
}

table FBCudaMemcpyD2H {
    dst:uint64;
    src:uint64;
    size:uint64;
    buffer:[uint8];
}

table FBCudaMemcpyD2D {
    dst:uint64;
    src:uint64;
    size:uint64;
}

table FBCudaMemcpyAsyncH2D {
    dst:uint64;
    src:uint64;
    size:uint64;
    stream:uint64;
    buffer:[uint8];
}

table FBCudaMemcpyAsyncD2H {
    dst:uint64;
    src:uint64;
    size:uint64;
    stream:uint64;
    buffer:[uint8];
}

table FBCudaMemcpyAsyncD2D {
    dst:uint64;
    src:uint64;
    size:uint64;
    stream:uint64;
}

table FBCudaLaunchKernel {
    symbol:string;
    required_modules:[uint64];
    required_function_symbols:[string];
    grid_dim:FBDim3;
    block_dim:FBDim3;
    shared_mem:uint64;
    stream:uint64;
    param_buffers:[FBParamBuffer];
    param_infos:[FBParamInfo];
}

table FBCudaFree {
    dev_ptr:uint64;
}

table FBCudaStreamSynchronize {
    stream:uint64;
}

table FBCudaGetDeviceProperties {
    properties_data:[uint8];
}

table FBCudaDeviceSynchronize {
}

table FBCudaFuncGetAttributes {
    symbol: string;
    binary_version: int;
    cache_mode_ca: int;
    const_size_bytes: uint64;
    local_size_bytes: uint64;
    max_dynamic_shared_size_bytes: int;
    max_threads_per_block: int;
    num_regs: int;
    preferred_shmem_carveout: int;
    ptx_version: int;
    shared_size_bytes: uint64;
}
